from collections.abc import Callable
from typing import Any, Optional

from django.template.exceptions import TemplateSyntaxError

from .base import BaseEngine

class Jinja2(BaseEngine):
    context_processors: list[str] = ...
    def __init__(self, params: dict[str, Any]) -> None: ...
    @property
    def template_context_processors(self) -> list[Callable[..., Any]]: ...

class Origin:
    name: str = ...
    template_name: Optional[str] = ...
    def __init__(self, name: str, template_name: Optional[str]) -> None: ...

def get_exception_info(exception: TemplateSyntaxError) -> dict[str, Any]: ...
